	The first concept that i used in the SOLID principles was the "S", the single responsibility principle. This principle is a computer programming principle that states that every module, class, or function should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by the class. I tried to use this principal through out all of my programing. Wheather it was in determining my classes or how each of my functions work. Specifically I believe I accompleshed this in my UserInterface class. First being a class that entirely encapsulats the functionality of a user interface. The purpose of this class was created to provide the user with feedback printed to the console and also to ubtain user input. Every function in this class deals solely with this in mind, and on that eash function also followes the single responsibility principle. Were each function deals solely with one task per function.
	The second concept that I used in the design of my propram is the "o" whitch is the open-closed principle that states software entities such as classes, modules, or functions should be open for extension, but closed for modification. Such that an entity can allow its behaviour to be extended without modifying its source code. I again tried to apply this principal to all of my code and specifically implemented this concept when creating my customer class. Each customer has its own price willing to pay and the possibility of buying a cup of lemonade. Inherently I can expand on this class with sub classes that would maybe enclude a recipe preference and still keep the customer class the same.